@page "/CreateQuest"

@using ChoreLore.Data
@using ChoreLore.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Models

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ChoreService ChoreService
@inject ApplicationDbContext ApplicationDbContext

<PageTitle>Create Quest</PageTitle>

<h1>Create a Quest</h1>

<div class="container">
    <div class="row">
        <EditForm FormName="CreateQuest" Model="@newQuest" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="questName" class="form-label">Quest Name</label>
                <InputText id="questName" class="form-control" @bind-Value="newQuest.Name" required />
            </div>
            <div class="mb-3">
                <label for="questName" class="form-label">Simple Name</label>
                <InputText id="questName" class="form-control" @bind-Value="newQuest.SimpleName" required />
            </div>
            <div class="mb-3">
                <label for="questDescription" class="form-label">Description</label>
                <InputTextArea id="questDescription" class="form-control" @bind-Value="newQuest.Description" required />
            </div>
            <div class="mb-3">
                <label for="questGold" class="form-label">Gold Reward</label>
                <InputNumber id="questGold" class="form-control" @bind-Value="newQuest.Gold" required />
            </div>
            <div class="mb-3">
                <label for="timesAWeek" class="form-label">Times a Week</label>
                <InputNumber id="timesAWeek" class="form-control" @bind-Value="newQuest.TimesAWeek" required />
            </div>
            <div class="mb-3">
                <label for="timesAWeek" class="form-label">Assign Quest</label>
                <InputSelect id="assignQuest" class="form-select" @bind-Value="newQuest.UserId" required>
                    <option value="">Select User</option>
                    @foreach (var user in users)
                    {
                        <option value="@user.Id">@user.UserName</option>
                    }
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary">Create Quest</button>
        </EditForm>
    </div>
</div>

@code {
    private Chore newQuest = new Chore();
    private ApplicationUser? user;

    private List<ApplicationUser> users = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;

        var identityUser = await UserManager.GetUserAsync(authUser);
        if (identityUser is not ApplicationUser applicationUser)
        {
            NavigationManager.NavigateTo("/Account/Login");
        }
        users = await ApplicationDbContext.Users.ToListAsync();

        user = identityUser;
        newQuest.UserId = user?.Id;
    }

    async Task HandleValidSubmit()
    {
        // Here you would typically call a service to save the new quest
        // For example: await ChoreService.CreateQuestAsync(newQuest);
        await ChoreService.CreateChoreAsync(newQuest);

        // For now, just reset the form
        newQuest = new Chore();
        StateHasChanged(); // Refresh the UI
    }
}
